// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class WordshkApi {
  Future<void> initApi(
      {required String apiJson,
      required String englishIndexJson,
      required String wordList,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitApiConstMeta;

  Future<List<PrSearchResult>> prSearch(
      {required int capacity,
      required String query,
      required Script script,
      required Romanization romanization,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrSearchConstMeta;

  Future<List<VariantSearchResult>> variantSearch(
      {required int capacity,
      required String query,
      required Script script,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVariantSearchConstMeta;

  Future<CombinedSearchResults> combinedSearch(
      {required int capacity,
      required String query,
      required Script script,
      required Romanization romanization,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCombinedSearchConstMeta;

  Future<List<EnglishSearchResult>> englishSearch(
      {required int capacity,
      required String query,
      required Script script,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEnglishSearchConstMeta;

  Future<String> getEntryJson({required int id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetEntryJsonConstMeta;

  Future<List<String>> getEntryGroupJson({required int id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetEntryGroupJsonConstMeta;

  Future<int?> getEntryId(
      {required String query, required Script script, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetEntryIdConstMeta;

  Future<List<String>> getJyutping({required String query, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetJyutpingConstMeta;

  Future<Api> newStaticMethodApi(
      {required String apiJson,
      required String englishIndexJson,
      required String wordList,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodApiConstMeta;

  Future<List<PrSearchResult>> prSearchMethodApi(
      {required Api that,
      required int capacity,
      required String query,
      required Script script,
      required Romanization romanization,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrSearchMethodApiConstMeta;

  Future<List<VariantSearchResult>> variantSearchMethodApi(
      {required Api that,
      required int capacity,
      required String query,
      required Script script,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVariantSearchMethodApiConstMeta;

  Future<CombinedSearchResults> combinedSearchMethodApi(
      {required Api that,
      required int capacity,
      required String query,
      required Script script,
      required Romanization romanization,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCombinedSearchMethodApiConstMeta;

  Future<List<EnglishSearchResult>> englishSearchMethodApi(
      {required Api that,
      required int capacity,
      required String query,
      required Script script,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEnglishSearchMethodApiConstMeta;

  Future<String> getEntryJsonMethodApi(
      {required Api that, required int id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetEntryJsonMethodApiConstMeta;

  Future<List<String>> getEntryGroupJsonMethodApi(
      {required Api that, required int id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetEntryGroupJsonMethodApiConstMeta;

  Future<int?> getEntryIdMethodApi(
      {required Api that,
      required String query,
      required Script script,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetEntryIdMethodApiConstMeta;

  Future<List<String>> getJyutpingMethodApi(
      {required Api that, required String query, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetJyutpingMethodApiConstMeta;

  DropFnType get dropOpaqueEnglishIndex;
  ShareFnType get shareOpaqueEnglishIndex;
  OpaqueTypeFinalizer get EnglishIndexFinalizer;

  DropFnType get dropOpaqueHashMapStringVecString;
  ShareFnType get shareOpaqueHashMapStringVecString;
  OpaqueTypeFinalizer get HashMapStringVecStringFinalizer;

  DropFnType get dropOpaqueRichDict;
  ShareFnType get shareOpaqueRichDict;
  OpaqueTypeFinalizer get RichDictFinalizer;

  DropFnType get dropOpaqueSearchVariantsMap;
  ShareFnType get shareOpaqueSearchVariantsMap;
  OpaqueTypeFinalizer get SearchVariantsMapFinalizer;
}

@sealed
class EnglishIndex extends FrbOpaque {
  final WordshkApi bridge;
  EnglishIndex.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueEnglishIndex;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueEnglishIndex;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.EnglishIndexFinalizer;
}

@sealed
class HashMapStringVecString extends FrbOpaque {
  final WordshkApi bridge;
  HashMapStringVecString.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueHashMapStringVecString;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueHashMapStringVecString;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.HashMapStringVecStringFinalizer;
}

@sealed
class RichDict extends FrbOpaque {
  final WordshkApi bridge;
  RichDict.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueRichDict;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueRichDict;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.RichDictFinalizer;
}

@sealed
class SearchVariantsMap extends FrbOpaque {
  final WordshkApi bridge;
  SearchVariantsMap.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueSearchVariantsMap;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueSearchVariantsMap;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.SearchVariantsMapFinalizer;
}

class Api {
  final WordshkApi bridge;
  final RichDict dict;
  final EnglishIndex englishIndex;
  final SearchVariantsMap variantsMap;
  final HashMapStringVecString wordList;

  const Api({
    required this.bridge,
    required this.dict,
    required this.englishIndex,
    required this.variantsMap,
    required this.wordList,
  });

  static Future<Api> newApi(
          {required WordshkApi bridge,
          required String apiJson,
          required String englishIndexJson,
          required String wordList,
          dynamic hint}) =>
      bridge.newStaticMethodApi(
          apiJson: apiJson,
          englishIndexJson: englishIndexJson,
          wordList: wordList,
          hint: hint);

  Future<List<PrSearchResult>> prSearch(
          {required int capacity,
          required String query,
          required Script script,
          required Romanization romanization,
          dynamic hint}) =>
      bridge.prSearchMethodApi(
        that: this,
        capacity: capacity,
        query: query,
        script: script,
        romanization: romanization,
      );

  Future<List<VariantSearchResult>> variantSearch(
          {required int capacity,
          required String query,
          required Script script,
          dynamic hint}) =>
      bridge.variantSearchMethodApi(
        that: this,
        capacity: capacity,
        query: query,
        script: script,
      );

  Future<CombinedSearchResults> combinedSearch(
          {required int capacity,
          required String query,
          required Script script,
          required Romanization romanization,
          dynamic hint}) =>
      bridge.combinedSearchMethodApi(
        that: this,
        capacity: capacity,
        query: query,
        script: script,
        romanization: romanization,
      );

  Future<List<EnglishSearchResult>> englishSearch(
          {required int capacity,
          required String query,
          required Script script,
          dynamic hint}) =>
      bridge.englishSearchMethodApi(
        that: this,
        capacity: capacity,
        query: query,
        script: script,
      );

  Future<String> getEntryJson({required int id, dynamic hint}) =>
      bridge.getEntryJsonMethodApi(
        that: this,
        id: id,
      );

  Future<List<String>> getEntryGroupJson({required int id, dynamic hint}) =>
      bridge.getEntryGroupJsonMethodApi(
        that: this,
        id: id,
      );

  Future<int?> getEntryId(
          {required String query, required Script script, dynamic hint}) =>
      bridge.getEntryIdMethodApi(
        that: this,
        query: query,
        script: script,
      );

  Future<List<String>> getJyutping({required String query, dynamic hint}) =>
      bridge.getJyutpingMethodApi(
        that: this,
        query: query,
      );
}

class CombinedSearchResults {
  final List<VariantSearchResult> variantResults;
  final List<PrSearchResult> prResults;
  final List<EnglishSearchResult> englishResults;

  const CombinedSearchResults({
    required this.variantResults,
    required this.prResults,
    required this.englishResults,
  });
}

class EnglishSearchResult {
  final int id;
  final int defIndex;
  final String variant;
  final String pr;
  final String eng;

  const EnglishSearchResult({
    required this.id,
    required this.defIndex,
    required this.variant,
    required this.pr,
    required this.eng,
  });
}

class PrSearchResult {
  final int id;
  final String variant;
  final String pr;

  const PrSearchResult({
    required this.id,
    required this.variant,
    required this.pr,
  });
}

enum Romanization {
  Jyutping,
  YaleNumbers,
  YaleDiacritics,
  CantonesePinyin,
  Guangdong,
  SidneyLau,
  Ipa,
}

enum Script {
  Simplified,
  Traditional,
}

class VariantSearchResult {
  final int id;
  final String variant;

  const VariantSearchResult({
    required this.id,
    required this.variant,
  });
}

class WordshkApiImpl implements WordshkApi {
  final WordshkApiPlatform _platform;
  factory WordshkApiImpl(ExternalLibrary dylib) =>
      WordshkApiImpl.raw(WordshkApiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory WordshkApiImpl.wasm(FutureOr<WasmModule> module) =>
      WordshkApiImpl(module as ExternalLibrary);
  WordshkApiImpl.raw(this._platform);
  Future<void> initApi(
      {required String apiJson,
      required String englishIndexJson,
      required String wordList,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(apiJson);
    var arg1 = _platform.api2wire_String(englishIndexJson);
    var arg2 = _platform.api2wire_String(wordList);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_init_api(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitApiConstMeta,
      argValues: [apiJson, englishIndexJson, wordList],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_api",
        argNames: ["apiJson", "englishIndexJson", "wordList"],
      );

  Future<List<PrSearchResult>> prSearch(
      {required int capacity,
      required String query,
      required Script script,
      required Romanization romanization,
      dynamic hint}) {
    var arg0 = api2wire_u32(capacity);
    var arg1 = _platform.api2wire_String(query);
    var arg2 = api2wire_script(script);
    var arg3 = api2wire_romanization(romanization);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_pr_search(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_list_pr_search_result,
      constMeta: kPrSearchConstMeta,
      argValues: [capacity, query, script, romanization],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrSearchConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pr_search",
        argNames: ["capacity", "query", "script", "romanization"],
      );

  Future<List<VariantSearchResult>> variantSearch(
      {required int capacity,
      required String query,
      required Script script,
      dynamic hint}) {
    var arg0 = api2wire_u32(capacity);
    var arg1 = _platform.api2wire_String(query);
    var arg2 = api2wire_script(script);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_variant_search(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_variant_search_result,
      constMeta: kVariantSearchConstMeta,
      argValues: [capacity, query, script],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVariantSearchConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "variant_search",
        argNames: ["capacity", "query", "script"],
      );

  Future<CombinedSearchResults> combinedSearch(
      {required int capacity,
      required String query,
      required Script script,
      required Romanization romanization,
      dynamic hint}) {
    var arg0 = api2wire_u32(capacity);
    var arg1 = _platform.api2wire_String(query);
    var arg2 = api2wire_script(script);
    var arg3 = api2wire_romanization(romanization);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_combined_search(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_combined_search_results,
      constMeta: kCombinedSearchConstMeta,
      argValues: [capacity, query, script, romanization],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCombinedSearchConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "combined_search",
        argNames: ["capacity", "query", "script", "romanization"],
      );

  Future<List<EnglishSearchResult>> englishSearch(
      {required int capacity,
      required String query,
      required Script script,
      dynamic hint}) {
    var arg0 = api2wire_u32(capacity);
    var arg1 = _platform.api2wire_String(query);
    var arg2 = api2wire_script(script);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_english_search(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_english_search_result,
      constMeta: kEnglishSearchConstMeta,
      argValues: [capacity, query, script],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEnglishSearchConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "english_search",
        argNames: ["capacity", "query", "script"],
      );

  Future<String> getEntryJson({required int id, dynamic hint}) {
    var arg0 = api2wire_u32(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_entry_json(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetEntryJsonConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetEntryJsonConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_entry_json",
        argNames: ["id"],
      );

  Future<List<String>> getEntryGroupJson({required int id, dynamic hint}) {
    var arg0 = api2wire_u32(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_entry_group_json(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetEntryGroupJsonConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetEntryGroupJsonConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_entry_group_json",
        argNames: ["id"],
      );

  Future<int?> getEntryId(
      {required String query, required Script script, dynamic hint}) {
    var arg0 = _platform.api2wire_String(query);
    var arg1 = api2wire_script(script);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_entry_id(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_box_autoadd_u32,
      constMeta: kGetEntryIdConstMeta,
      argValues: [query, script],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetEntryIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_entry_id",
        argNames: ["query", "script"],
      );

  Future<List<String>> getJyutping({required String query, dynamic hint}) {
    var arg0 = _platform.api2wire_String(query);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_jyutping(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetJyutpingConstMeta,
      argValues: [query],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetJyutpingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_jyutping",
        argNames: ["query"],
      );

  Future<Api> newStaticMethodApi(
      {required String apiJson,
      required String englishIndexJson,
      required String wordList,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(apiJson);
    var arg1 = _platform.api2wire_String(englishIndexJson);
    var arg2 = _platform.api2wire_String(wordList);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new__static_method__Api(port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_api(d),
      constMeta: kNewStaticMethodApiConstMeta,
      argValues: [apiJson, englishIndexJson, wordList],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__Api",
        argNames: ["apiJson", "englishIndexJson", "wordList"],
      );

  Future<List<PrSearchResult>> prSearchMethodApi(
      {required Api that,
      required int capacity,
      required String query,
      required Script script,
      required Romanization romanization,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_api(that);
    var arg1 = api2wire_u32(capacity);
    var arg2 = _platform.api2wire_String(query);
    var arg3 = api2wire_script(script);
    var arg4 = api2wire_romanization(romanization);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_pr_search__method__Api(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_list_pr_search_result,
      constMeta: kPrSearchMethodApiConstMeta,
      argValues: [that, capacity, query, script, romanization],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrSearchMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "pr_search__method__Api",
        argNames: ["that", "capacity", "query", "script", "romanization"],
      );

  Future<List<VariantSearchResult>> variantSearchMethodApi(
      {required Api that,
      required int capacity,
      required String query,
      required Script script,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_api(that);
    var arg1 = api2wire_u32(capacity);
    var arg2 = _platform.api2wire_String(query);
    var arg3 = api2wire_script(script);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_variant_search__method__Api(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_list_variant_search_result,
      constMeta: kVariantSearchMethodApiConstMeta,
      argValues: [that, capacity, query, script],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVariantSearchMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "variant_search__method__Api",
        argNames: ["that", "capacity", "query", "script"],
      );

  Future<CombinedSearchResults> combinedSearchMethodApi(
      {required Api that,
      required int capacity,
      required String query,
      required Script script,
      required Romanization romanization,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_api(that);
    var arg1 = api2wire_u32(capacity);
    var arg2 = _platform.api2wire_String(query);
    var arg3 = api2wire_script(script);
    var arg4 = api2wire_romanization(romanization);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_combined_search__method__Api(
          port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_combined_search_results,
      constMeta: kCombinedSearchMethodApiConstMeta,
      argValues: [that, capacity, query, script, romanization],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCombinedSearchMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "combined_search__method__Api",
        argNames: ["that", "capacity", "query", "script", "romanization"],
      );

  Future<List<EnglishSearchResult>> englishSearchMethodApi(
      {required Api that,
      required int capacity,
      required String query,
      required Script script,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_api(that);
    var arg1 = api2wire_u32(capacity);
    var arg2 = _platform.api2wire_String(query);
    var arg3 = api2wire_script(script);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_english_search__method__Api(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_list_english_search_result,
      constMeta: kEnglishSearchMethodApiConstMeta,
      argValues: [that, capacity, query, script],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEnglishSearchMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "english_search__method__Api",
        argNames: ["that", "capacity", "query", "script"],
      );

  Future<String> getEntryJsonMethodApi(
      {required Api that, required int id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_api(that);
    var arg1 = api2wire_usize(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_entry_json__method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kGetEntryJsonMethodApiConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetEntryJsonMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_entry_json__method__Api",
        argNames: ["that", "id"],
      );

  Future<List<String>> getEntryGroupJsonMethodApi(
      {required Api that, required int id, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_api(that);
    var arg1 = api2wire_usize(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_entry_group_json__method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetEntryGroupJsonMethodApiConstMeta,
      argValues: [that, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetEntryGroupJsonMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_entry_group_json__method__Api",
        argNames: ["that", "id"],
      );

  Future<int?> getEntryIdMethodApi(
      {required Api that,
      required String query,
      required Script script,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_api(that);
    var arg1 = _platform.api2wire_String(query);
    var arg2 = api2wire_script(script);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_entry_id__method__Api(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_opt_box_autoadd_u32,
      constMeta: kGetEntryIdMethodApiConstMeta,
      argValues: [that, query, script],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetEntryIdMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_entry_id__method__Api",
        argNames: ["that", "query", "script"],
      );

  Future<List<String>> getJyutpingMethodApi(
      {required Api that, required String query, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_api(that);
    var arg1 = _platform.api2wire_String(query);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_jyutping__method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      constMeta: kGetJyutpingMethodApiConstMeta,
      argValues: [that, query],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetJyutpingMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_jyutping__method__Api",
        argNames: ["that", "query"],
      );

  DropFnType get dropOpaqueEnglishIndex =>
      _platform.inner.drop_opaque_EnglishIndex;
  ShareFnType get shareOpaqueEnglishIndex =>
      _platform.inner.share_opaque_EnglishIndex;
  OpaqueTypeFinalizer get EnglishIndexFinalizer =>
      _platform.EnglishIndexFinalizer;

  DropFnType get dropOpaqueHashMapStringVecString =>
      _platform.inner.drop_opaque_HashMapStringVecString;
  ShareFnType get shareOpaqueHashMapStringVecString =>
      _platform.inner.share_opaque_HashMapStringVecString;
  OpaqueTypeFinalizer get HashMapStringVecStringFinalizer =>
      _platform.HashMapStringVecStringFinalizer;

  DropFnType get dropOpaqueRichDict => _platform.inner.drop_opaque_RichDict;
  ShareFnType get shareOpaqueRichDict => _platform.inner.share_opaque_RichDict;
  OpaqueTypeFinalizer get RichDictFinalizer => _platform.RichDictFinalizer;

  DropFnType get dropOpaqueSearchVariantsMap =>
      _platform.inner.drop_opaque_SearchVariantsMap;
  ShareFnType get shareOpaqueSearchVariantsMap =>
      _platform.inner.share_opaque_SearchVariantsMap;
  OpaqueTypeFinalizer get SearchVariantsMapFinalizer =>
      _platform.SearchVariantsMapFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  EnglishIndex _wire2api_EnglishIndex(dynamic raw) {
    return EnglishIndex.fromRaw(raw[0], raw[1], this);
  }

  HashMapStringVecString _wire2api_HashMapStringVecString(dynamic raw) {
    return HashMapStringVecString.fromRaw(raw[0], raw[1], this);
  }

  RichDict _wire2api_RichDict(dynamic raw) {
    return RichDict.fromRaw(raw[0], raw[1], this);
  }

  SearchVariantsMap _wire2api_SearchVariantsMap(dynamic raw) {
    return SearchVariantsMap.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  Api _wire2api_api(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Api(
      bridge: this,
      dict: _wire2api_RichDict(arr[0]),
      englishIndex: _wire2api_EnglishIndex(arr[1]),
      variantsMap: _wire2api_SearchVariantsMap(arr[2]),
      wordList: _wire2api_HashMapStringVecString(arr[3]),
    );
  }

  int _wire2api_box_autoadd_u32(dynamic raw) {
    return raw as int;
  }

  CombinedSearchResults _wire2api_combined_search_results(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return CombinedSearchResults(
      variantResults: _wire2api_list_variant_search_result(arr[0]),
      prResults: _wire2api_list_pr_search_result(arr[1]),
      englishResults: _wire2api_list_english_search_result(arr[2]),
    );
  }

  EnglishSearchResult _wire2api_english_search_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return EnglishSearchResult(
      id: _wire2api_u32(arr[0]),
      defIndex: _wire2api_u32(arr[1]),
      variant: _wire2api_String(arr[2]),
      pr: _wire2api_String(arr[3]),
      eng: _wire2api_String(arr[4]),
    );
  }

  List<EnglishSearchResult> _wire2api_list_english_search_result(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_english_search_result).toList();
  }

  List<PrSearchResult> _wire2api_list_pr_search_result(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_pr_search_result).toList();
  }

  List<VariantSearchResult> _wire2api_list_variant_search_result(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_variant_search_result).toList();
  }

  int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u32(raw);
  }

  PrSearchResult _wire2api_pr_search_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PrSearchResult(
      id: _wire2api_u32(arr[0]),
      variant: _wire2api_String(arr[1]),
      pr: _wire2api_String(arr[2]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  VariantSearchResult _wire2api_variant_search_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return VariantSearchResult(
      id: _wire2api_u32(arr[0]),
      variant: _wire2api_String(arr[1]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_romanization(Romanization raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_script(Script raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class WordshkApiPlatform extends FlutterRustBridgeBase<WordshkApiWire> {
  WordshkApiPlatform(ffi.DynamicLibrary dylib) : super(WordshkApiWire(dylib));

// Section: api2wire

  @protected
  wire_EnglishIndex api2wire_EnglishIndex(EnglishIndex raw) {
    final ptr = inner.new_EnglishIndex();
    _api_fill_to_wire_EnglishIndex(raw, ptr);
    return ptr;
  }

  @protected
  wire_HashMapStringVecString api2wire_HashMapStringVecString(
      HashMapStringVecString raw) {
    final ptr = inner.new_HashMapStringVecString();
    _api_fill_to_wire_HashMapStringVecString(raw, ptr);
    return ptr;
  }

  @protected
  wire_RichDict api2wire_RichDict(RichDict raw) {
    final ptr = inner.new_RichDict();
    _api_fill_to_wire_RichDict(raw, ptr);
    return ptr;
  }

  @protected
  wire_SearchVariantsMap api2wire_SearchVariantsMap(SearchVariantsMap raw) {
    final ptr = inner.new_SearchVariantsMap();
    _api_fill_to_wire_SearchVariantsMap(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Api> api2wire_box_autoadd_api(Api raw) {
    final ptr = inner.new_box_autoadd_api_0();
    _api_fill_to_wire_api(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _EnglishIndexFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_EnglishIndexPtr);
  OpaqueTypeFinalizer get EnglishIndexFinalizer => _EnglishIndexFinalizer;
  late final OpaqueTypeFinalizer _HashMapStringVecStringFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_HashMapStringVecStringPtr);
  OpaqueTypeFinalizer get HashMapStringVecStringFinalizer =>
      _HashMapStringVecStringFinalizer;
  late final OpaqueTypeFinalizer _RichDictFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RichDictPtr);
  OpaqueTypeFinalizer get RichDictFinalizer => _RichDictFinalizer;
  late final OpaqueTypeFinalizer _SearchVariantsMapFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_SearchVariantsMapPtr);
  OpaqueTypeFinalizer get SearchVariantsMapFinalizer =>
      _SearchVariantsMapFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_EnglishIndex(
      EnglishIndex apiObj, wire_EnglishIndex wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_HashMapStringVecString(
      HashMapStringVecString apiObj, wire_HashMapStringVecString wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RichDict(RichDict apiObj, wire_RichDict wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_SearchVariantsMap(
      SearchVariantsMap apiObj, wire_SearchVariantsMap wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_api(Api apiObj, wire_Api wireObj) {
    wireObj.dict = api2wire_RichDict(apiObj.dict);
    wireObj.english_index = api2wire_EnglishIndex(apiObj.englishIndex);
    wireObj.variants_map = api2wire_SearchVariantsMap(apiObj.variantsMap);
    wireObj.word_list = api2wire_HashMapStringVecString(apiObj.wordList);
  }

  void _api_fill_to_wire_box_autoadd_api(
      Api apiObj, ffi.Pointer<wire_Api> wireObj) {
    _api_fill_to_wire_api(apiObj, wireObj.ref);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class WordshkApiWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WordshkApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WordshkApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init_api(
    int port_,
    ffi.Pointer<wire_uint_8_list> api_json,
    ffi.Pointer<wire_uint_8_list> english_index_json,
    ffi.Pointer<wire_uint_8_list> word_list,
  ) {
    return _wire_init_api(
      port_,
      api_json,
      english_index_json,
      word_list,
    );
  }

  late final _wire_init_apiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_init_api');
  late final _wire_init_api = _wire_init_apiPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_pr_search(
    int port_,
    int capacity,
    ffi.Pointer<wire_uint_8_list> query,
    int script,
    int romanization,
  ) {
    return _wire_pr_search(
      port_,
      capacity,
      query,
      script,
      romanization,
    );
  }

  late final _wire_pr_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32)>>('wire_pr_search');
  late final _wire_pr_search = _wire_pr_searchPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_variant_search(
    int port_,
    int capacity,
    ffi.Pointer<wire_uint_8_list> query,
    int script,
  ) {
    return _wire_variant_search(
      port_,
      capacity,
      query,
      script,
    );
  }

  late final _wire_variant_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_variant_search');
  late final _wire_variant_search = _wire_variant_searchPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_combined_search(
    int port_,
    int capacity,
    ffi.Pointer<wire_uint_8_list> query,
    int script,
    int romanization,
  ) {
    return _wire_combined_search(
      port_,
      capacity,
      query,
      script,
      romanization,
    );
  }

  late final _wire_combined_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32)>>('wire_combined_search');
  late final _wire_combined_search = _wire_combined_searchPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_english_search(
    int port_,
    int capacity,
    ffi.Pointer<wire_uint_8_list> query,
    int script,
  ) {
    return _wire_english_search(
      port_,
      capacity,
      query,
      script,
    );
  }

  late final _wire_english_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_english_search');
  late final _wire_english_search = _wire_english_searchPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_get_entry_json(
    int port_,
    int id,
  ) {
    return _wire_get_entry_json(
      port_,
      id,
    );
  }

  late final _wire_get_entry_jsonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_get_entry_json');
  late final _wire_get_entry_json =
      _wire_get_entry_jsonPtr.asFunction<void Function(int, int)>();

  void wire_get_entry_group_json(
    int port_,
    int id,
  ) {
    return _wire_get_entry_group_json(
      port_,
      id,
    );
  }

  late final _wire_get_entry_group_jsonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_get_entry_group_json');
  late final _wire_get_entry_group_json =
      _wire_get_entry_group_jsonPtr.asFunction<void Function(int, int)>();

  void wire_get_entry_id(
    int port_,
    ffi.Pointer<wire_uint_8_list> query,
    int script,
  ) {
    return _wire_get_entry_id(
      port_,
      query,
      script,
    );
  }

  late final _wire_get_entry_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_get_entry_id');
  late final _wire_get_entry_id = _wire_get_entry_idPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_get_jyutping(
    int port_,
    ffi.Pointer<wire_uint_8_list> query,
  ) {
    return _wire_get_jyutping(
      port_,
      query,
    );
  }

  late final _wire_get_jyutpingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_get_jyutping');
  late final _wire_get_jyutping = _wire_get_jyutpingPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> api_json,
    ffi.Pointer<wire_uint_8_list> english_index_json,
    ffi.Pointer<wire_uint_8_list> word_list,
  ) {
    return _wire_new__static_method__Api(
      port_,
      api_json,
      english_index_json,
      word_list,
    );
  }

  late final _wire_new__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new__static_method__Api');
  late final _wire_new__static_method__Api =
      _wire_new__static_method__ApiPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_pr_search__method__Api(
    int port_,
    ffi.Pointer<wire_Api> that,
    int capacity,
    ffi.Pointer<wire_uint_8_list> query,
    int script,
    int romanization,
  ) {
    return _wire_pr_search__method__Api(
      port_,
      that,
      capacity,
      query,
      script,
      romanization,
    );
  }

  late final _wire_pr_search__method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Api>,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32)>>('wire_pr_search__method__Api');
  late final _wire_pr_search__method__Api =
      _wire_pr_search__method__ApiPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Api>, int,
              ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_variant_search__method__Api(
    int port_,
    ffi.Pointer<wire_Api> that,
    int capacity,
    ffi.Pointer<wire_uint_8_list> query,
    int script,
  ) {
    return _wire_variant_search__method__Api(
      port_,
      that,
      capacity,
      query,
      script,
    );
  }

  late final _wire_variant_search__method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Api>,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_variant_search__method__Api');
  late final _wire_variant_search__method__Api =
      _wire_variant_search__method__ApiPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Api>, int,
              ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_combined_search__method__Api(
    int port_,
    ffi.Pointer<wire_Api> that,
    int capacity,
    ffi.Pointer<wire_uint_8_list> query,
    int script,
    int romanization,
  ) {
    return _wire_combined_search__method__Api(
      port_,
      that,
      capacity,
      query,
      script,
      romanization,
    );
  }

  late final _wire_combined_search__method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Api>,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32)>>('wire_combined_search__method__Api');
  late final _wire_combined_search__method__Api =
      _wire_combined_search__method__ApiPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Api>, int,
              ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_english_search__method__Api(
    int port_,
    ffi.Pointer<wire_Api> that,
    int capacity,
    ffi.Pointer<wire_uint_8_list> query,
    int script,
  ) {
    return _wire_english_search__method__Api(
      port_,
      that,
      capacity,
      query,
      script,
    );
  }

  late final _wire_english_search__method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Api>,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_english_search__method__Api');
  late final _wire_english_search__method__Api =
      _wire_english_search__method__ApiPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Api>, int,
              ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_get_entry_json__method__Api(
    int port_,
    ffi.Pointer<wire_Api> that,
    int id,
  ) {
    return _wire_get_entry_json__method__Api(
      port_,
      that,
      id,
    );
  }

  late final _wire_get_entry_json__method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Api>,
              ffi.UintPtr)>>('wire_get_entry_json__method__Api');
  late final _wire_get_entry_json__method__Api =
      _wire_get_entry_json__method__ApiPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Api>, int)>();

  void wire_get_entry_group_json__method__Api(
    int port_,
    ffi.Pointer<wire_Api> that,
    int id,
  ) {
    return _wire_get_entry_group_json__method__Api(
      port_,
      that,
      id,
    );
  }

  late final _wire_get_entry_group_json__method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Api>,
              ffi.UintPtr)>>('wire_get_entry_group_json__method__Api');
  late final _wire_get_entry_group_json__method__Api =
      _wire_get_entry_group_json__method__ApiPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Api>, int)>();

  void wire_get_entry_id__method__Api(
    int port_,
    ffi.Pointer<wire_Api> that,
    ffi.Pointer<wire_uint_8_list> query,
    int script,
  ) {
    return _wire_get_entry_id__method__Api(
      port_,
      that,
      query,
      script,
    );
  }

  late final _wire_get_entry_id__method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Api>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_get_entry_id__method__Api');
  late final _wire_get_entry_id__method__Api =
      _wire_get_entry_id__method__ApiPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Api>,
              ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_get_jyutping__method__Api(
    int port_,
    ffi.Pointer<wire_Api> that,
    ffi.Pointer<wire_uint_8_list> query,
  ) {
    return _wire_get_jyutping__method__Api(
      port_,
      that,
      query,
    );
  }

  late final _wire_get_jyutping__method__ApiPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Api>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_jyutping__method__Api');
  late final _wire_get_jyutping__method__Api =
      _wire_get_jyutping__method__ApiPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_Api>, ffi.Pointer<wire_uint_8_list>)>();

  wire_EnglishIndex new_EnglishIndex() {
    return _new_EnglishIndex();
  }

  late final _new_EnglishIndexPtr =
      _lookup<ffi.NativeFunction<wire_EnglishIndex Function()>>(
          'new_EnglishIndex');
  late final _new_EnglishIndex =
      _new_EnglishIndexPtr.asFunction<wire_EnglishIndex Function()>();

  wire_HashMapStringVecString new_HashMapStringVecString() {
    return _new_HashMapStringVecString();
  }

  late final _new_HashMapStringVecStringPtr =
      _lookup<ffi.NativeFunction<wire_HashMapStringVecString Function()>>(
          'new_HashMapStringVecString');
  late final _new_HashMapStringVecString = _new_HashMapStringVecStringPtr
      .asFunction<wire_HashMapStringVecString Function()>();

  wire_RichDict new_RichDict() {
    return _new_RichDict();
  }

  late final _new_RichDictPtr =
      _lookup<ffi.NativeFunction<wire_RichDict Function()>>('new_RichDict');
  late final _new_RichDict =
      _new_RichDictPtr.asFunction<wire_RichDict Function()>();

  wire_SearchVariantsMap new_SearchVariantsMap() {
    return _new_SearchVariantsMap();
  }

  late final _new_SearchVariantsMapPtr =
      _lookup<ffi.NativeFunction<wire_SearchVariantsMap Function()>>(
          'new_SearchVariantsMap');
  late final _new_SearchVariantsMap =
      _new_SearchVariantsMapPtr.asFunction<wire_SearchVariantsMap Function()>();

  ffi.Pointer<wire_Api> new_box_autoadd_api_0() {
    return _new_box_autoadd_api_0();
  }

  late final _new_box_autoadd_api_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Api> Function()>>(
          'new_box_autoadd_api_0');
  late final _new_box_autoadd_api_0 =
      _new_box_autoadd_api_0Ptr.asFunction<ffi.Pointer<wire_Api> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_EnglishIndex(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_EnglishIndex(
      ptr,
    );
  }

  late final _drop_opaque_EnglishIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_EnglishIndex');
  late final _drop_opaque_EnglishIndex = _drop_opaque_EnglishIndexPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_EnglishIndex(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_EnglishIndex(
      ptr,
    );
  }

  late final _share_opaque_EnglishIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_EnglishIndex');
  late final _share_opaque_EnglishIndex = _share_opaque_EnglishIndexPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_HashMapStringVecString(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_HashMapStringVecString(
      ptr,
    );
  }

  late final _drop_opaque_HashMapStringVecStringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_HashMapStringVecString');
  late final _drop_opaque_HashMapStringVecString =
      _drop_opaque_HashMapStringVecStringPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_HashMapStringVecString(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_HashMapStringVecString(
      ptr,
    );
  }

  late final _share_opaque_HashMapStringVecStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_HashMapStringVecString');
  late final _share_opaque_HashMapStringVecString =
      _share_opaque_HashMapStringVecStringPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RichDict(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RichDict(
      ptr,
    );
  }

  late final _drop_opaque_RichDictPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RichDict');
  late final _drop_opaque_RichDict = _drop_opaque_RichDictPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RichDict(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RichDict(
      ptr,
    );
  }

  late final _share_opaque_RichDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RichDict');
  late final _share_opaque_RichDict = _share_opaque_RichDictPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_SearchVariantsMap(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_SearchVariantsMap(
      ptr,
    );
  }

  late final _drop_opaque_SearchVariantsMapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_SearchVariantsMap');
  late final _drop_opaque_SearchVariantsMap = _drop_opaque_SearchVariantsMapPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_SearchVariantsMap(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_SearchVariantsMap(
      ptr,
    );
  }

  late final _share_opaque_SearchVariantsMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_SearchVariantsMap');
  late final _share_opaque_SearchVariantsMap =
      _share_opaque_SearchVariantsMapPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_RichDict extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_EnglishIndex extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_SearchVariantsMap extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_HashMapStringVecString extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_Api extends ffi.Struct {
  external wire_RichDict dict;

  external wire_EnglishIndex english_index;

  external wire_SearchVariantsMap variants_map;

  external wire_HashMapStringVecString word_list;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
