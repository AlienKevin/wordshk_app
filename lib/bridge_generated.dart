// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal
import 'dart:convert';
import 'dart:typed_data';

import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class WordshkApi extends FlutterRustBridgeBase<WordshkApiWire> {
  factory WordshkApi(ffi.DynamicLibrary dylib) =>
      WordshkApiImpl.raw(WordshkApiWire(dylib));

  WordshkApi.raw(WordshkApiWire inner) : super(inner);

  Future<void> initApi({required String inputAppDir, dynamic hint});

  Future<List<PrSearchResult>> prSearch(
      {required int capacity, required String query, dynamic hint});

  Future<List<VariantSearchResult>> variantSearch(
      {required int capacity, required String query, dynamic hint});

  Future<String> getEntryHtml({required int id, dynamic hint});
}

class PrSearchResult {
  final int id;
  final String variant;
  final String pr;

  PrSearchResult({
    required this.id,
    required this.variant,
    required this.pr,
  });
}

class VariantSearchResult {
  final int id;
  final String variant;

  VariantSearchResult({
    required this.id,
    required this.variant,
  });
}

// ------------------------- Implementation Details -------------------------

/// Implementations for WordshkApi. Prefer using WordshkApi if possible; but this class allows more
/// flexible customizations (such as subclassing to create an initializer, a logger, or
/// a timer).
class WordshkApiImpl extends WordshkApi {
  WordshkApiImpl.raw(WordshkApiWire inner) : super.raw(inner);

  Future<void> initApi({required String inputAppDir, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) =>
            inner.wire_init_api(port, _api2wire_String(inputAppDir)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "init_api",
          argNames: ["inputAppDir"],
        ),
        argValues: [inputAppDir],
        hint: hint,
      ));

  Future<List<PrSearchResult>> prSearch(
          {required int capacity, required String query, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_pr_search(
            port, _api2wire_u32(capacity), _api2wire_String(query)),
        parseSuccessData: _wire2api_list_pr_search_result,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "pr_search",
          argNames: ["capacity", "query"],
        ),
        argValues: [capacity, query],
        hint: hint,
      ));

  Future<List<VariantSearchResult>> variantSearch(
          {required int capacity, required String query, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_variant_search(
            port, _api2wire_u32(capacity), _api2wire_String(query)),
        parseSuccessData: _wire2api_list_variant_search_result,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "variant_search",
          argNames: ["capacity", "query"],
        ),
        argValues: [capacity, query],
        hint: hint,
      ));

  Future<String> getEntryHtml({required int id, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_get_entry_html(port, _api2wire_u32(id)),
        parseSuccessData: _wire2api_String,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_entry_html",
          argNames: ["id"],
        ),
        argValues: [id],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

List<PrSearchResult> _wire2api_list_pr_search_result(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_pr_search_result).toList();
}

List<VariantSearchResult> _wire2api_list_variant_search_result(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_variant_search_result).toList();
}

PrSearchResult _wire2api_pr_search_result(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return PrSearchResult(
    id: _wire2api_u32(arr[0]),
    variant: _wire2api_String(arr[1]),
    pr: _wire2api_String(arr[2]),
  );
}

int _wire2api_u32(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

VariantSearchResult _wire2api_variant_search_result(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return VariantSearchResult(
    id: _wire2api_u32(arr[0]),
    variant: _wire2api_String(arr[1]),
  );
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class WordshkApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WordshkApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WordshkApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_init_api(
    int port,
    ffi.Pointer<wire_uint_8_list> input_app_dir,
  ) {
    return _wire_init_api(
      port,
      input_app_dir,
    );
  }

  late final _wire_init_apiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_init_api');
  late final _wire_init_api = _wire_init_apiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_pr_search(
    int port,
    int capacity,
    ffi.Pointer<wire_uint_8_list> query,
  ) {
    return _wire_pr_search(
      port,
      capacity,
      query,
    );
  }

  late final _wire_pr_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_pr_search');
  late final _wire_pr_search = _wire_pr_searchPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_variant_search(
    int port,
    int capacity,
    ffi.Pointer<wire_uint_8_list> query,
  ) {
    return _wire_variant_search(
      port,
      capacity,
      query,
    );
  }

  late final _wire_variant_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_variant_search');
  late final _wire_variant_search = _wire_variant_searchPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_entry_html(
    int port,
    int id,
  ) {
    return _wire_get_entry_html(
      port,
      id,
    );
  }

  late final _wire_get_entry_htmlPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32)>>(
          'wire_get_entry_html');
  late final _wire_get_entry_html =
      _wire_get_entry_htmlPtr.asFunction<void Function(int, int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
