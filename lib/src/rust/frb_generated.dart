// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiApiInitUtils();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.6.0';

  @override
  int get rustContentHash => 1145110130;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<CombinedSearchResults> crateApiApiCombinedSearch(
      {required int capacity,
      required String query,
      required Script script,
      required Romanization romanization});

  Stream<String> crateApiApiCreateLogStream();

  Future<List<EgSearchResult>> crateApiApiEgSearch(
      {required int capacity, required String query, required Script script});

  Future<List<String>> crateApiApiGetEntryGroupJson({required int id});

  Future<int?> crateApiApiGetEntryId(
      {required String query, required Script script});

  Future<List<EntrySummary>> crateApiApiGetEntrySummaries(
      {required List<int> entryIds, required Romanization romanization});

  Future<void> crateApiApiInitApi(
      {required String dictPath, required List<int> dictZip});

  Future<void> crateApiApiInitUtils();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<CombinedSearchResults> crateApiApiCombinedSearch(
      {required int capacity,
      required String query,
      required Script script,
      required Romanization romanization}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(capacity, serializer);
        sse_encode_String(query, serializer);
        sse_encode_script(script, serializer);
        sse_encode_romanization(romanization, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_combined_search_results,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiCombinedSearchConstMeta,
      argValues: [capacity, query, script, romanization],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiCombinedSearchConstMeta => const TaskConstMeta(
        debugName: "combined_search",
        argNames: ["capacity", "query", "script", "romanization"],
      );

  @override
  Stream<String> crateApiApiCreateLogStream() {
    final s = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiCreateLogStreamConstMeta,
      argValues: [s],
      apiImpl: this,
    )));
    return s.stream;
  }

  TaskConstMeta get kCrateApiApiCreateLogStreamConstMeta => const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: ["s"],
      );

  @override
  Future<List<EgSearchResult>> crateApiApiEgSearch(
      {required int capacity, required String query, required Script script}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(capacity, serializer);
        sse_encode_String(query, serializer);
        sse_encode_script(script, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_eg_search_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiEgSearchConstMeta,
      argValues: [capacity, query, script],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiEgSearchConstMeta => const TaskConstMeta(
        debugName: "eg_search",
        argNames: ["capacity", "query", "script"],
      );

  @override
  Future<List<String>> crateApiApiGetEntryGroupJson({required int id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetEntryGroupJsonConstMeta,
      argValues: [id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetEntryGroupJsonConstMeta =>
      const TaskConstMeta(
        debugName: "get_entry_group_json",
        argNames: ["id"],
      );

  @override
  Future<int?> crateApiApiGetEntryId(
      {required String query, required Script script}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(query, serializer);
        sse_encode_script(script, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetEntryIdConstMeta,
      argValues: [query, script],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetEntryIdConstMeta => const TaskConstMeta(
        debugName: "get_entry_id",
        argNames: ["query", "script"],
      );

  @override
  Future<List<EntrySummary>> crateApiApiGetEntrySummaries(
      {required List<int> entryIds, required Romanization romanization}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(entryIds, serializer);
        sse_encode_romanization(romanization, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_entry_summary,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiGetEntrySummariesConstMeta,
      argValues: [entryIds, romanization],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiGetEntrySummariesConstMeta =>
      const TaskConstMeta(
        debugName: "get_entry_summaries",
        argNames: ["entryIds", "romanization"],
      );

  @override
  Future<void> crateApiApiInitApi(
      {required String dictPath, required List<int> dictZip}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dictPath, serializer);
        sse_encode_list_prim_u_8_loose(dictZip, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiInitApiConstMeta,
      argValues: [dictPath, dictZip],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiInitApiConstMeta => const TaskConstMeta(
        debugName: "init_api",
        argNames: ["dictPath", "dictZip"],
      );

  @override
  Future<void> crateApiApiInitUtils() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiApiInitUtilsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiApiInitUtilsConstMeta => const TaskConstMeta(
        debugName: "init_utils",
        argNames: [],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  CombinedSearchResults dco_decode_combined_search_results(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return CombinedSearchResults(
      variantResults:
          dco_decode_record_opt_box_autoadd_u_32_list_variant_search_result(
              arr[0]),
      mandarinVariantResults:
          dco_decode_record_opt_box_autoadd_u_32_list_mandarin_variant_search_result(
              arr[1]),
      prResults:
          dco_decode_record_opt_box_autoadd_u_32_list_pr_search_result(arr[2]),
      englishResults:
          dco_decode_record_opt_box_autoadd_u_32_list_english_search_result(
              arr[3]),
      egResults:
          dco_decode_record_opt_box_autoadd_u_32_list_eg_search_result(arr[4]),
    );
  }

  @protected
  EgSearchResult dco_decode_eg_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return EgSearchResult(
      id: dco_decode_u_32(arr[0]),
      defIndex: dco_decode_u_32(arr[1]),
      egIndex: dco_decode_u_32(arr[2]),
      matchedEg: dco_decode_matched_infix(arr[3]),
    );
  }

  @protected
  EnglishSearchResult dco_decode_english_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return EnglishSearchResult(
      id: dco_decode_u_32(arr[0]),
      defIndex: dco_decode_u_32(arr[1]),
      variants: dco_decode_list_record_string_string(arr[2]),
      matchedEng: dco_decode_list_matched_segment(arr[3]),
    );
  }

  @protected
  EntryDef dco_decode_entry_def(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return EntryDef(
      yueTrad: dco_decode_String(arr[0]),
      yueSimp: dco_decode_String(arr[1]),
      eng: dco_decode_String(arr[2]),
    );
  }

  @protected
  EntrySummary dco_decode_entry_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return EntrySummary(
      variantTrad: dco_decode_String(arr[0]),
      variantSimp: dco_decode_String(arr[1]),
      prs: dco_decode_list_String(arr[2]),
      defs: dco_decode_list_entry_def(arr[3]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<EgSearchResult> dco_decode_list_eg_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_eg_search_result).toList();
  }

  @protected
  List<EnglishSearchResult> dco_decode_list_english_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_english_search_result)
        .toList();
  }

  @protected
  List<EntryDef> dco_decode_list_entry_def(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_entry_def).toList();
  }

  @protected
  List<EntrySummary> dco_decode_list_entry_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_entry_summary).toList();
  }

  @protected
  List<MandarinVariantSearchResult>
      dco_decode_list_mandarin_variant_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_mandarin_variant_search_result)
        .toList();
  }

  @protected
  List<MatchedSegment> dco_decode_list_matched_segment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_matched_segment).toList();
  }

  @protected
  List<PrSearchResult> dco_decode_list_pr_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_pr_search_result).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<VariantSearchResult> dco_decode_list_variant_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_variant_search_result)
        .toList();
  }

  @protected
  MandarinVariantSearchResult dco_decode_mandarin_variant_search_result(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return MandarinVariantSearchResult(
      id: dco_decode_u_32(arr[0]),
      variant: dco_decode_String(arr[1]),
      matchedMandarinVariant: dco_decode_matched_infix(arr[2]),
      prs: dco_decode_list_String(arr[3]),
      yue: dco_decode_String(arr[4]),
      eng: dco_decode_String(arr[5]),
    );
  }

  @protected
  MatchedInfix dco_decode_matched_infix(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MatchedInfix(
      prefix: dco_decode_String(arr[0]),
      query: dco_decode_String(arr[1]),
      suffix: dco_decode_String(arr[2]),
    );
  }

  @protected
  MatchedSegment dco_decode_matched_segment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MatchedSegment(
      segment: dco_decode_String(arr[0]),
      matched: dco_decode_bool(arr[1]),
    );
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  PrSearchResult dco_decode_pr_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return PrSearchResult(
      id: dco_decode_u_32(arr[0]),
      variants: dco_decode_list_String(arr[1]),
      matchedPr: dco_decode_list_matched_segment(arr[2]),
      yues: dco_decode_list_String(arr[3]),
      engs: dco_decode_list_String(arr[4]),
    );
  }

  @protected
  (
    int?,
    List<EgSearchResult>
  ) dco_decode_record_opt_box_autoadd_u_32_list_eg_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_opt_box_autoadd_u_32(arr[0]),
      dco_decode_list_eg_search_result(arr[1]),
    );
  }

  @protected
  (int?, List<EnglishSearchResult>)
      dco_decode_record_opt_box_autoadd_u_32_list_english_search_result(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_opt_box_autoadd_u_32(arr[0]),
      dco_decode_list_english_search_result(arr[1]),
    );
  }

  @protected
  (
    int?,
    List<MandarinVariantSearchResult>
  ) dco_decode_record_opt_box_autoadd_u_32_list_mandarin_variant_search_result(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_opt_box_autoadd_u_32(arr[0]),
      dco_decode_list_mandarin_variant_search_result(arr[1]),
    );
  }

  @protected
  (
    int?,
    List<PrSearchResult>
  ) dco_decode_record_opt_box_autoadd_u_32_list_pr_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_opt_box_autoadd_u_32(arr[0]),
      dco_decode_list_pr_search_result(arr[1]),
    );
  }

  @protected
  (int?, List<VariantSearchResult>)
      dco_decode_record_opt_box_autoadd_u_32_list_variant_search_result(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_opt_box_autoadd_u_32(arr[0]),
      dco_decode_list_variant_search_result(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  Romanization dco_decode_romanization(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Romanization.values[raw as int];
  }

  @protected
  Script dco_decode_script(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Script.values[raw as int];
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  VariantSearchResult dco_decode_variant_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return VariantSearchResult(
      id: dco_decode_u_32(arr[0]),
      matchedVariant: dco_decode_matched_infix(arr[1]),
      prs: dco_decode_list_String(arr[2]),
      yues: dco_decode_list_String(arr[3]),
      engs: dco_decode_list_String(arr[4]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  CombinedSearchResults sse_decode_combined_search_results(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_variantResults =
        sse_decode_record_opt_box_autoadd_u_32_list_variant_search_result(
            deserializer);
    var var_mandarinVariantResults =
        sse_decode_record_opt_box_autoadd_u_32_list_mandarin_variant_search_result(
            deserializer);
    var var_prResults =
        sse_decode_record_opt_box_autoadd_u_32_list_pr_search_result(
            deserializer);
    var var_englishResults =
        sse_decode_record_opt_box_autoadd_u_32_list_english_search_result(
            deserializer);
    var var_egResults =
        sse_decode_record_opt_box_autoadd_u_32_list_eg_search_result(
            deserializer);
    return CombinedSearchResults(
        variantResults: var_variantResults,
        mandarinVariantResults: var_mandarinVariantResults,
        prResults: var_prResults,
        englishResults: var_englishResults,
        egResults: var_egResults);
  }

  @protected
  EgSearchResult sse_decode_eg_search_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_defIndex = sse_decode_u_32(deserializer);
    var var_egIndex = sse_decode_u_32(deserializer);
    var var_matchedEg = sse_decode_matched_infix(deserializer);
    return EgSearchResult(
        id: var_id,
        defIndex: var_defIndex,
        egIndex: var_egIndex,
        matchedEg: var_matchedEg);
  }

  @protected
  EnglishSearchResult sse_decode_english_search_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_defIndex = sse_decode_u_32(deserializer);
    var var_variants = sse_decode_list_record_string_string(deserializer);
    var var_matchedEng = sse_decode_list_matched_segment(deserializer);
    return EnglishSearchResult(
        id: var_id,
        defIndex: var_defIndex,
        variants: var_variants,
        matchedEng: var_matchedEng);
  }

  @protected
  EntryDef sse_decode_entry_def(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_yueTrad = sse_decode_String(deserializer);
    var var_yueSimp = sse_decode_String(deserializer);
    var var_eng = sse_decode_String(deserializer);
    return EntryDef(yueTrad: var_yueTrad, yueSimp: var_yueSimp, eng: var_eng);
  }

  @protected
  EntrySummary sse_decode_entry_summary(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_variantTrad = sse_decode_String(deserializer);
    var var_variantSimp = sse_decode_String(deserializer);
    var var_prs = sse_decode_list_String(deserializer);
    var var_defs = sse_decode_list_entry_def(deserializer);
    return EntrySummary(
        variantTrad: var_variantTrad,
        variantSimp: var_variantSimp,
        prs: var_prs,
        defs: var_defs);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<EgSearchResult> sse_decode_list_eg_search_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EgSearchResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_eg_search_result(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnglishSearchResult> sse_decode_list_english_search_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnglishSearchResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_english_search_result(deserializer));
    }
    return ans_;
  }

  @protected
  List<EntryDef> sse_decode_list_entry_def(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EntryDef>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_entry_def(deserializer));
    }
    return ans_;
  }

  @protected
  List<EntrySummary> sse_decode_list_entry_summary(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EntrySummary>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_entry_summary(deserializer));
    }
    return ans_;
  }

  @protected
  List<MandarinVariantSearchResult>
      sse_decode_list_mandarin_variant_search_result(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MandarinVariantSearchResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_mandarin_variant_search_result(deserializer));
    }
    return ans_;
  }

  @protected
  List<MatchedSegment> sse_decode_list_matched_segment(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MatchedSegment>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_matched_segment(deserializer));
    }
    return ans_;
  }

  @protected
  List<PrSearchResult> sse_decode_list_pr_search_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PrSearchResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_pr_search_result(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<VariantSearchResult> sse_decode_list_variant_search_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <VariantSearchResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_variant_search_result(deserializer));
    }
    return ans_;
  }

  @protected
  MandarinVariantSearchResult sse_decode_mandarin_variant_search_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_variant = sse_decode_String(deserializer);
    var var_matchedMandarinVariant = sse_decode_matched_infix(deserializer);
    var var_prs = sse_decode_list_String(deserializer);
    var var_yue = sse_decode_String(deserializer);
    var var_eng = sse_decode_String(deserializer);
    return MandarinVariantSearchResult(
        id: var_id,
        variant: var_variant,
        matchedMandarinVariant: var_matchedMandarinVariant,
        prs: var_prs,
        yue: var_yue,
        eng: var_eng);
  }

  @protected
  MatchedInfix sse_decode_matched_infix(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_prefix = sse_decode_String(deserializer);
    var var_query = sse_decode_String(deserializer);
    var var_suffix = sse_decode_String(deserializer);
    return MatchedInfix(
        prefix: var_prefix, query: var_query, suffix: var_suffix);
  }

  @protected
  MatchedSegment sse_decode_matched_segment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_segment = sse_decode_String(deserializer);
    var var_matched = sse_decode_bool(deserializer);
    return MatchedSegment(segment: var_segment, matched: var_matched);
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PrSearchResult sse_decode_pr_search_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_variants = sse_decode_list_String(deserializer);
    var var_matchedPr = sse_decode_list_matched_segment(deserializer);
    var var_yues = sse_decode_list_String(deserializer);
    var var_engs = sse_decode_list_String(deserializer);
    return PrSearchResult(
        id: var_id,
        variants: var_variants,
        matchedPr: var_matchedPr,
        yues: var_yues,
        engs: var_engs);
  }

  @protected
  (int?, List<EgSearchResult>)
      sse_decode_record_opt_box_autoadd_u_32_list_eg_search_result(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_field1 = sse_decode_list_eg_search_result(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int?, List<EnglishSearchResult>)
      sse_decode_record_opt_box_autoadd_u_32_list_english_search_result(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_field1 = sse_decode_list_english_search_result(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    int?,
    List<MandarinVariantSearchResult>
  ) sse_decode_record_opt_box_autoadd_u_32_list_mandarin_variant_search_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_field1 =
        sse_decode_list_mandarin_variant_search_result(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int?, List<PrSearchResult>)
      sse_decode_record_opt_box_autoadd_u_32_list_pr_search_result(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_field1 = sse_decode_list_pr_search_result(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int?, List<VariantSearchResult>)
      sse_decode_record_opt_box_autoadd_u_32_list_variant_search_result(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_field1 = sse_decode_list_variant_search_result(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Romanization sse_decode_romanization(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Romanization.values[inner];
  }

  @protected
  Script sse_decode_script(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Script.values[inner];
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  VariantSearchResult sse_decode_variant_search_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_matchedVariant = sse_decode_matched_infix(deserializer);
    var var_prs = sse_decode_list_String(deserializer);
    var var_yues = sse_decode_list_String(deserializer);
    var var_engs = sse_decode_list_String(deserializer);
    return VariantSearchResult(
        id: var_id,
        matchedVariant: var_matchedVariant,
        prs: var_prs,
        yues: var_yues,
        engs: var_engs);
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_combined_search_results(
      CombinedSearchResults self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_opt_box_autoadd_u_32_list_variant_search_result(
        self.variantResults, serializer);
    sse_encode_record_opt_box_autoadd_u_32_list_mandarin_variant_search_result(
        self.mandarinVariantResults, serializer);
    sse_encode_record_opt_box_autoadd_u_32_list_pr_search_result(
        self.prResults, serializer);
    sse_encode_record_opt_box_autoadd_u_32_list_english_search_result(
        self.englishResults, serializer);
    sse_encode_record_opt_box_autoadd_u_32_list_eg_search_result(
        self.egResults, serializer);
  }

  @protected
  void sse_encode_eg_search_result(
      EgSearchResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_32(self.defIndex, serializer);
    sse_encode_u_32(self.egIndex, serializer);
    sse_encode_matched_infix(self.matchedEg, serializer);
  }

  @protected
  void sse_encode_english_search_result(
      EnglishSearchResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_32(self.defIndex, serializer);
    sse_encode_list_record_string_string(self.variants, serializer);
    sse_encode_list_matched_segment(self.matchedEng, serializer);
  }

  @protected
  void sse_encode_entry_def(EntryDef self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.yueTrad, serializer);
    sse_encode_String(self.yueSimp, serializer);
    sse_encode_String(self.eng, serializer);
  }

  @protected
  void sse_encode_entry_summary(EntrySummary self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.variantTrad, serializer);
    sse_encode_String(self.variantSimp, serializer);
    sse_encode_list_String(self.prs, serializer);
    sse_encode_list_entry_def(self.defs, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_eg_search_result(
      List<EgSearchResult> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_eg_search_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_english_search_result(
      List<EnglishSearchResult> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_english_search_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_entry_def(
      List<EntryDef> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_entry_def(item, serializer);
    }
  }

  @protected
  void sse_encode_list_entry_summary(
      List<EntrySummary> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_entry_summary(item, serializer);
    }
  }

  @protected
  void sse_encode_list_mandarin_variant_search_result(
      List<MandarinVariantSearchResult> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_mandarin_variant_search_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_matched_segment(
      List<MatchedSegment> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_matched_segment(item, serializer);
    }
  }

  @protected
  void sse_encode_list_pr_search_result(
      List<PrSearchResult> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_pr_search_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint32List(self is Uint32List ? self : Uint32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_variant_search_result(
      List<VariantSearchResult> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_variant_search_result(item, serializer);
    }
  }

  @protected
  void sse_encode_mandarin_variant_search_result(
      MandarinVariantSearchResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.variant, serializer);
    sse_encode_matched_infix(self.matchedMandarinVariant, serializer);
    sse_encode_list_String(self.prs, serializer);
    sse_encode_String(self.yue, serializer);
    sse_encode_String(self.eng, serializer);
  }

  @protected
  void sse_encode_matched_infix(MatchedInfix self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.prefix, serializer);
    sse_encode_String(self.query, serializer);
    sse_encode_String(self.suffix, serializer);
  }

  @protected
  void sse_encode_matched_segment(
      MatchedSegment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.segment, serializer);
    sse_encode_bool(self.matched, serializer);
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_pr_search_result(
      PrSearchResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_list_String(self.variants, serializer);
    sse_encode_list_matched_segment(self.matchedPr, serializer);
    sse_encode_list_String(self.yues, serializer);
    sse_encode_list_String(self.engs, serializer);
  }

  @protected
  void sse_encode_record_opt_box_autoadd_u_32_list_eg_search_result(
      (int?, List<EgSearchResult>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_32(self.$1, serializer);
    sse_encode_list_eg_search_result(self.$2, serializer);
  }

  @protected
  void sse_encode_record_opt_box_autoadd_u_32_list_english_search_result(
      (int?, List<EnglishSearchResult>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_32(self.$1, serializer);
    sse_encode_list_english_search_result(self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_opt_box_autoadd_u_32_list_mandarin_variant_search_result(
          (int?, List<MandarinVariantSearchResult>) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_32(self.$1, serializer);
    sse_encode_list_mandarin_variant_search_result(self.$2, serializer);
  }

  @protected
  void sse_encode_record_opt_box_autoadd_u_32_list_pr_search_result(
      (int?, List<PrSearchResult>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_32(self.$1, serializer);
    sse_encode_list_pr_search_result(self.$2, serializer);
  }

  @protected
  void sse_encode_record_opt_box_autoadd_u_32_list_variant_search_result(
      (int?, List<VariantSearchResult>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_32(self.$1, serializer);
    sse_encode_list_variant_search_result(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_romanization(Romanization self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_script(Script self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_variant_search_result(
      VariantSearchResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_matched_infix(self.matchedVariant, serializer);
    sse_encode_list_String(self.prs, serializer);
    sse_encode_list_String(self.yues, serializer);
    sse_encode_list_String(self.engs, serializer);
  }
}
