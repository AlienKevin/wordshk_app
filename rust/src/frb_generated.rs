// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.6.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1145110130;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__api__combined_search_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "combined_search",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_capacity = <u32>::sse_decode(&mut deserializer);
            let api_query = <String>::sse_decode(&mut deserializer);
            let api_script = <crate::api::api::Script>::sse_decode(&mut deserializer);
            let api_romanization = <crate::api::api::Romanization>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::api::combined_search(
                        api_capacity,
                        api_query,
                        api_script,
                        api_romanization,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__create_log_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s =
                <StreamSink<String, flutter_rust_bridge::for_generated::SseCodec>>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::api::create_log_stream(api_s);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__eg_search_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "eg_search",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_capacity = <u32>::sse_decode(&mut deserializer);
            let api_query = <String>::sse_decode(&mut deserializer);
            let api_script = <crate::api::api::Script>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::api::eg_search(
                        api_capacity,
                        api_query,
                        api_script,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__get_entry_group_json_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_entry_group_json",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::get_entry_group_json(api_id))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__get_entry_id_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_entry_id",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_query = <String>::sse_decode(&mut deserializer);
            let api_script = <crate::api::api::Script>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::api::get_entry_id(api_query, api_script))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__get_entry_summaries_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_entry_summaries",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_entry_ids = <Vec<u32>>::sse_decode(&mut deserializer);
            let api_romanization = <crate::api::api::Romanization>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::api::get_entry_summaries(
                        api_entry_ids,
                        api_romanization,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__init_api_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_api",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_dict_path = <String>::sse_decode(&mut deserializer);
            let api_dict_zip = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::api::init_api(api_dict_path, api_dict_zip);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__api__init_utils_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_utils",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::api::init_utils();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let MatchedInfix = None::<crate::api::api::MatchedInfix>.unwrap();
        let _: String = MatchedInfix.prefix;
        let _: String = MatchedInfix.query;
        let _: String = MatchedInfix.suffix;
    }
    {
        let MatchedSegment = None::<crate::api::api::MatchedSegment>.unwrap();
        let _: String = MatchedSegment.segment;
        let _: bool = MatchedSegment.matched;
    }
};

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for StreamSink<String, flutter_rust_bridge::for_generated::SseCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::api::CombinedSearchResults {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_variantResults =
            <(Option<u32>, Vec<crate::api::api::VariantSearchResult>)>::sse_decode(deserializer);
        let mut var_mandarinVariantResults = <(
            Option<u32>,
            Vec<crate::api::api::MandarinVariantSearchResult>,
        )>::sse_decode(deserializer);
        let mut var_prResults =
            <(Option<u32>, Vec<crate::api::api::PrSearchResult>)>::sse_decode(deserializer);
        let mut var_englishResults =
            <(Option<u32>, Vec<crate::api::api::EnglishSearchResult>)>::sse_decode(deserializer);
        let mut var_egResults =
            <(Option<u32>, Vec<crate::api::api::EgSearchResult>)>::sse_decode(deserializer);
        return crate::api::api::CombinedSearchResults {
            variant_results: var_variantResults,
            mandarin_variant_results: var_mandarinVariantResults,
            pr_results: var_prResults,
            english_results: var_englishResults,
            eg_results: var_egResults,
        };
    }
}

impl SseDecode for crate::api::api::EgSearchResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u32>::sse_decode(deserializer);
        let mut var_defIndex = <u32>::sse_decode(deserializer);
        let mut var_egIndex = <u32>::sse_decode(deserializer);
        let mut var_matchedEg = <crate::api::api::MatchedInfix>::sse_decode(deserializer);
        return crate::api::api::EgSearchResult {
            id: var_id,
            def_index: var_defIndex,
            eg_index: var_egIndex,
            matched_eg: var_matchedEg,
        };
    }
}

impl SseDecode for crate::api::api::EnglishSearchResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u32>::sse_decode(deserializer);
        let mut var_defIndex = <u32>::sse_decode(deserializer);
        let mut var_variants = <Vec<(String, String)>>::sse_decode(deserializer);
        let mut var_matchedEng = <Vec<crate::api::api::MatchedSegment>>::sse_decode(deserializer);
        return crate::api::api::EnglishSearchResult {
            id: var_id,
            def_index: var_defIndex,
            variants: var_variants,
            matched_eng: var_matchedEng,
        };
    }
}

impl SseDecode for crate::api::api::EntryDef {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_yueTrad = <String>::sse_decode(deserializer);
        let mut var_yueSimp = <String>::sse_decode(deserializer);
        let mut var_eng = <String>::sse_decode(deserializer);
        return crate::api::api::EntryDef {
            yue_trad: var_yueTrad,
            yue_simp: var_yueSimp,
            eng: var_eng,
        };
    }
}

impl SseDecode for crate::api::api::EntrySummary {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_variantTrad = <String>::sse_decode(deserializer);
        let mut var_variantSimp = <String>::sse_decode(deserializer);
        let mut var_prs = <Vec<String>>::sse_decode(deserializer);
        let mut var_defs = <Vec<crate::api::api::EntryDef>>::sse_decode(deserializer);
        return crate::api::api::EntrySummary {
            variant_trad: var_variantTrad,
            variant_simp: var_variantSimp,
            prs: var_prs,
            defs: var_defs,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::EgSearchResult> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::EgSearchResult>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::EnglishSearchResult> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::EnglishSearchResult>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::EntryDef> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::EntryDef>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::EntrySummary> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::EntrySummary>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::MandarinVariantSearchResult> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::MandarinVariantSearchResult>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::MatchedSegment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::MatchedSegment>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::PrSearchResult> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::PrSearchResult>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::api::VariantSearchResult> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::api::VariantSearchResult>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::api::MandarinVariantSearchResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u32>::sse_decode(deserializer);
        let mut var_variant = <String>::sse_decode(deserializer);
        let mut var_matchedMandarinVariant =
            <crate::api::api::MatchedInfix>::sse_decode(deserializer);
        let mut var_prs = <Vec<String>>::sse_decode(deserializer);
        let mut var_yue = <String>::sse_decode(deserializer);
        let mut var_eng = <String>::sse_decode(deserializer);
        return crate::api::api::MandarinVariantSearchResult {
            id: var_id,
            variant: var_variant,
            matched_mandarin_variant: var_matchedMandarinVariant,
            prs: var_prs,
            yue: var_yue,
            eng: var_eng,
        };
    }
}

impl SseDecode for crate::api::api::MatchedInfix {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_prefix = <String>::sse_decode(deserializer);
        let mut var_query = <String>::sse_decode(deserializer);
        let mut var_suffix = <String>::sse_decode(deserializer);
        return crate::api::api::MatchedInfix {
            prefix: var_prefix,
            query: var_query,
            suffix: var_suffix,
        };
    }
}

impl SseDecode for crate::api::api::MatchedSegment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_segment = <String>::sse_decode(deserializer);
        let mut var_matched = <bool>::sse_decode(deserializer);
        return crate::api::api::MatchedSegment {
            segment: var_segment,
            matched: var_matched,
        };
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::api::PrSearchResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u32>::sse_decode(deserializer);
        let mut var_variants = <Vec<String>>::sse_decode(deserializer);
        let mut var_matchedPr = <Vec<crate::api::api::MatchedSegment>>::sse_decode(deserializer);
        let mut var_yues = <Vec<String>>::sse_decode(deserializer);
        let mut var_engs = <Vec<String>>::sse_decode(deserializer);
        return crate::api::api::PrSearchResult {
            id: var_id,
            variants: var_variants,
            matched_pr: var_matchedPr,
            yues: var_yues,
            engs: var_engs,
        };
    }
}

impl SseDecode for (Option<u32>, Vec<crate::api::api::EgSearchResult>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Option<u32>>::sse_decode(deserializer);
        let mut var_field1 = <Vec<crate::api::api::EgSearchResult>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (Option<u32>, Vec<crate::api::api::EnglishSearchResult>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Option<u32>>::sse_decode(deserializer);
        let mut var_field1 = <Vec<crate::api::api::EnglishSearchResult>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        Option<u32>,
        Vec<crate::api::api::MandarinVariantSearchResult>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Option<u32>>::sse_decode(deserializer);
        let mut var_field1 =
            <Vec<crate::api::api::MandarinVariantSearchResult>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (Option<u32>, Vec<crate::api::api::PrSearchResult>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Option<u32>>::sse_decode(deserializer);
        let mut var_field1 = <Vec<crate::api::api::PrSearchResult>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (Option<u32>, Vec<crate::api::api::VariantSearchResult>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Option<u32>>::sse_decode(deserializer);
        let mut var_field1 = <Vec<crate::api::api::VariantSearchResult>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::api::Romanization {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::api::Romanization::Jyutping,
            1 => crate::api::api::Romanization::Yale,
            _ => unreachable!("Invalid variant for Romanization: {}", inner),
        };
    }
}

impl SseDecode for crate::api::api::Script {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::api::Script::Simplified,
            1 => crate::api::api::Script::Traditional,
            _ => unreachable!("Invalid variant for Script: {}", inner),
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::api::api::VariantSearchResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u32>::sse_decode(deserializer);
        let mut var_matchedVariant = <crate::api::api::MatchedInfix>::sse_decode(deserializer);
        let mut var_prs = <Vec<String>>::sse_decode(deserializer);
        let mut var_yues = <Vec<String>>::sse_decode(deserializer);
        let mut var_engs = <Vec<String>>::sse_decode(deserializer);
        return crate::api::api::VariantSearchResult {
            id: var_id,
            matched_variant: var_matchedVariant,
            prs: var_prs,
            yues: var_yues,
            engs: var_engs,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__api__combined_search_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__api__create_log_stream_impl(port, ptr, rust_vec_len, data_len),
        3 => wire__crate__api__api__eg_search_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__api__get_entry_group_json_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__api__get_entry_id_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__api__get_entry_summaries_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__api__init_api_impl(port, ptr, rust_vec_len, data_len),
        8 => wire__crate__api__api__init_utils_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::CombinedSearchResults {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.variant_results.into_into_dart().into_dart(),
            self.mandarin_variant_results.into_into_dart().into_dart(),
            self.pr_results.into_into_dart().into_dart(),
            self.english_results.into_into_dart().into_dart(),
            self.eg_results.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::CombinedSearchResults
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::CombinedSearchResults>
    for crate::api::api::CombinedSearchResults
{
    fn into_into_dart(self) -> crate::api::api::CombinedSearchResults {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::EgSearchResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.def_index.into_into_dart().into_dart(),
            self.eg_index.into_into_dart().into_dart(),
            self.matched_eg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::EgSearchResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::EgSearchResult>
    for crate::api::api::EgSearchResult
{
    fn into_into_dart(self) -> crate::api::api::EgSearchResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::EnglishSearchResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.def_index.into_into_dart().into_dart(),
            self.variants.into_into_dart().into_dart(),
            self.matched_eng.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::EnglishSearchResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::EnglishSearchResult>
    for crate::api::api::EnglishSearchResult
{
    fn into_into_dart(self) -> crate::api::api::EnglishSearchResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::EntryDef {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.yue_trad.into_into_dart().into_dart(),
            self.yue_simp.into_into_dart().into_dart(),
            self.eng.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::EntryDef {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::EntryDef> for crate::api::api::EntryDef {
    fn into_into_dart(self) -> crate::api::api::EntryDef {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::EntrySummary {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.variant_trad.into_into_dart().into_dart(),
            self.variant_simp.into_into_dart().into_dart(),
            self.prs.into_into_dart().into_dart(),
            self.defs.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::api::EntrySummary {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::EntrySummary>
    for crate::api::api::EntrySummary
{
    fn into_into_dart(self) -> crate::api::api::EntrySummary {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::MandarinVariantSearchResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.variant.into_into_dart().into_dart(),
            self.matched_mandarin_variant.into_into_dart().into_dart(),
            self.prs.into_into_dart().into_dart(),
            self.yue.into_into_dart().into_dart(),
            self.eng.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::MandarinVariantSearchResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::MandarinVariantSearchResult>
    for crate::api::api::MandarinVariantSearchResult
{
    fn into_into_dart(self) -> crate::api::api::MandarinVariantSearchResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::MatchedInfix> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.prefix.into_into_dart().into_dart(),
            self.0.query.into_into_dart().into_dart(),
            self.0.suffix.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::MatchedInfix>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::MatchedInfix>>
    for crate::api::api::MatchedInfix
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::MatchedInfix> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::MatchedSegment> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.segment.into_into_dart().into_dart(),
            self.0.matched.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::MatchedSegment>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::MatchedSegment>>
    for crate::api::api::MatchedSegment
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::MatchedSegment> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::PrSearchResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.variants.into_into_dart().into_dart(),
            self.matched_pr.into_into_dart().into_dart(),
            self.yues.into_into_dart().into_dart(),
            self.engs.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::PrSearchResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::PrSearchResult>
    for crate::api::api::PrSearchResult
{
    fn into_into_dart(self) -> crate::api::api::PrSearchResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::Romanization> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::Romanization::Jyutping => 0.into_dart(),
            crate::api::api::Romanization::Yale => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::Romanization>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::Romanization>>
    for crate::api::api::Romanization
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::Romanization> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::api::Script> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::api::Script::Simplified => 0.into_dart(),
            crate::api::api::Script::Traditional => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::api::Script>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::api::Script>>
    for crate::api::api::Script
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::api::Script> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::api::VariantSearchResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.matched_variant.into_into_dart().into_dart(),
            self.prs.into_into_dart().into_dart(),
            self.yues.into_into_dart().into_dart(),
            self.engs.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::api::VariantSearchResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::api::VariantSearchResult>
    for crate::api::api::VariantSearchResult
{
    fn into_into_dart(self) -> crate::api::api::VariantSearchResult {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for StreamSink<String, flutter_rust_bridge::for_generated::SseCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::api::CombinedSearchResults {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <(Option<u32>, Vec<crate::api::api::VariantSearchResult>)>::sse_encode(
            self.variant_results,
            serializer,
        );
        <(
            Option<u32>,
            Vec<crate::api::api::MandarinVariantSearchResult>,
        )>::sse_encode(self.mandarin_variant_results, serializer);
        <(Option<u32>, Vec<crate::api::api::PrSearchResult>)>::sse_encode(
            self.pr_results,
            serializer,
        );
        <(Option<u32>, Vec<crate::api::api::EnglishSearchResult>)>::sse_encode(
            self.english_results,
            serializer,
        );
        <(Option<u32>, Vec<crate::api::api::EgSearchResult>)>::sse_encode(
            self.eg_results,
            serializer,
        );
    }
}

impl SseEncode for crate::api::api::EgSearchResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.id, serializer);
        <u32>::sse_encode(self.def_index, serializer);
        <u32>::sse_encode(self.eg_index, serializer);
        <crate::api::api::MatchedInfix>::sse_encode(self.matched_eg, serializer);
    }
}

impl SseEncode for crate::api::api::EnglishSearchResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.id, serializer);
        <u32>::sse_encode(self.def_index, serializer);
        <Vec<(String, String)>>::sse_encode(self.variants, serializer);
        <Vec<crate::api::api::MatchedSegment>>::sse_encode(self.matched_eng, serializer);
    }
}

impl SseEncode for crate::api::api::EntryDef {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.yue_trad, serializer);
        <String>::sse_encode(self.yue_simp, serializer);
        <String>::sse_encode(self.eng, serializer);
    }
}

impl SseEncode for crate::api::api::EntrySummary {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.variant_trad, serializer);
        <String>::sse_encode(self.variant_simp, serializer);
        <Vec<String>>::sse_encode(self.prs, serializer);
        <Vec<crate::api::api::EntryDef>>::sse_encode(self.defs, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::EgSearchResult> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::EgSearchResult>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::EnglishSearchResult> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::EnglishSearchResult>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::EntryDef> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::EntryDef>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::EntrySummary> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::EntrySummary>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::MandarinVariantSearchResult> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::MandarinVariantSearchResult>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::MatchedSegment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::MatchedSegment>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::PrSearchResult> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::PrSearchResult>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::api::VariantSearchResult> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::api::VariantSearchResult>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::api::MandarinVariantSearchResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.variant, serializer);
        <crate::api::api::MatchedInfix>::sse_encode(self.matched_mandarin_variant, serializer);
        <Vec<String>>::sse_encode(self.prs, serializer);
        <String>::sse_encode(self.yue, serializer);
        <String>::sse_encode(self.eng, serializer);
    }
}

impl SseEncode for crate::api::api::MatchedInfix {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.prefix, serializer);
        <String>::sse_encode(self.query, serializer);
        <String>::sse_encode(self.suffix, serializer);
    }
}

impl SseEncode for crate::api::api::MatchedSegment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.segment, serializer);
        <bool>::sse_encode(self.matched, serializer);
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::api::PrSearchResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.id, serializer);
        <Vec<String>>::sse_encode(self.variants, serializer);
        <Vec<crate::api::api::MatchedSegment>>::sse_encode(self.matched_pr, serializer);
        <Vec<String>>::sse_encode(self.yues, serializer);
        <Vec<String>>::sse_encode(self.engs, serializer);
    }
}

impl SseEncode for (Option<u32>, Vec<crate::api::api::EgSearchResult>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u32>>::sse_encode(self.0, serializer);
        <Vec<crate::api::api::EgSearchResult>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (Option<u32>, Vec<crate::api::api::EnglishSearchResult>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u32>>::sse_encode(self.0, serializer);
        <Vec<crate::api::api::EnglishSearchResult>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        Option<u32>,
        Vec<crate::api::api::MandarinVariantSearchResult>,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u32>>::sse_encode(self.0, serializer);
        <Vec<crate::api::api::MandarinVariantSearchResult>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (Option<u32>, Vec<crate::api::api::PrSearchResult>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u32>>::sse_encode(self.0, serializer);
        <Vec<crate::api::api::PrSearchResult>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (Option<u32>, Vec<crate::api::api::VariantSearchResult>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u32>>::sse_encode(self.0, serializer);
        <Vec<crate::api::api::VariantSearchResult>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::api::Romanization {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::api::Romanization::Jyutping => 0,
                crate::api::api::Romanization::Yale => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::api::Script {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::api::Script::Simplified => 0,
                crate::api::api::Script::Traditional => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::api::VariantSearchResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.id, serializer);
        <crate::api::api::MatchedInfix>::sse_encode(self.matched_variant, serializer);
        <Vec<String>>::sse_encode(self.prs, serializer);
        <Vec<String>>::sse_encode(self.yues, serializer);
        <Vec<String>>::sse_encode(self.engs, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.6.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.6.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
