// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.9.

// Section: imports

use flutter_rust_bridge::Handler;

use super::*;

// Section: dart2rust

impl CstDecode<anyhow::Error> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<u32> for *mut u32 {
    fn cst_decode(self) -> u32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::api::api::CombinedSearchResults> for wire_cst_combined_search_results {
    fn cst_decode(self) -> crate::api::api::CombinedSearchResults {
        crate::api::api::CombinedSearchResults {
            variant_results: self.variant_results.cst_decode(),
            pr_results: self.pr_results.cst_decode(),
            english_results: self.english_results.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::EgSearchResult> for wire_cst_eg_search_result {
    fn cst_decode(self) -> crate::api::api::EgSearchResult {
        crate::api::api::EgSearchResult {
            id: self.id.cst_decode(),
            def_index: self.def_index.cst_decode(),
            eg_index: self.eg_index.cst_decode(),
            eg: self.eg.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::EnglishSearchResult> for wire_cst_english_search_result {
    fn cst_decode(self) -> crate::api::api::EnglishSearchResult {
        crate::api::api::EnglishSearchResult {
            id: self.id.cst_decode(),
            def_index: self.def_index.cst_decode(),
            variant: self.variant.cst_decode(),
            pr: self.pr.cst_decode(),
            matched_eng: self.matched_eng.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::EntrySummary> for wire_cst_entry_summary {
    fn cst_decode(self) -> crate::api::api::EntrySummary {
        crate::api::api::EntrySummary {
            variant: self.variant.cst_decode(),
            defs: self.defs.cst_decode(),
        }
    }
}
impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
    fn cst_decode(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::api::EgSearchResult>> for *mut wire_cst_list_eg_search_result {
    fn cst_decode(self) -> Vec<crate::api::api::EgSearchResult> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::api::EnglishSearchResult>>
    for *mut wire_cst_list_english_search_result
{
    fn cst_decode(self) -> Vec<crate::api::api::EnglishSearchResult> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::api::EntrySummary>> for *mut wire_cst_list_entry_summary {
    fn cst_decode(self) -> Vec<crate::api::api::EntrySummary> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::api::MatchedSegment>> for *mut wire_cst_list_matched_segment {
    fn cst_decode(self) -> Vec<crate::api::api::MatchedSegment> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::api::PrSearchResult>> for *mut wire_cst_list_pr_search_result {
    fn cst_decode(self) -> Vec<crate::api::api::PrSearchResult> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<u32>> for *mut wire_cst_list_prim_u_32 {
    fn cst_decode(self) -> Vec<u32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<(String, String)>> for *mut wire_cst_list_record_string_string {
    fn cst_decode(self) -> Vec<(String, String)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::api::SpotlightEntrySummary>>
    for *mut wire_cst_list_spotlight_entry_summary
{
    fn cst_decode(self) -> Vec<crate::api::api::SpotlightEntrySummary> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::api::VariantSearchResult>>
    for *mut wire_cst_list_variant_search_result
{
    fn cst_decode(self) -> Vec<crate::api::api::VariantSearchResult> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::api::api::MatchedSegment> for wire_cst_matched_segment {
    fn cst_decode(self) -> crate::api::api::MatchedSegment {
        crate::api::api::MatchedSegment {
            segment: self.segment.cst_decode(),
            matched: self.matched.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::MatchedVariant> for wire_cst_matched_variant {
    fn cst_decode(self) -> crate::api::api::MatchedVariant {
        crate::api::api::MatchedVariant {
            prefix: self.prefix.cst_decode(),
            query: self.query.cst_decode(),
            suffix: self.suffix.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::PrSearchResult> for wire_cst_pr_search_result {
    fn cst_decode(self) -> crate::api::api::PrSearchResult {
        crate::api::api::PrSearchResult {
            id: self.id.cst_decode(),
            variant: self.variant.cst_decode(),
            matched_pr: self.matched_pr.cst_decode(),
            yues: self.yues.cst_decode(),
            engs: self.engs.cst_decode(),
        }
    }
}
impl CstDecode<(Option<String>, Vec<crate::api::api::EgSearchResult>)>
    for wire_cst_record_opt_string_list_eg_search_result
{
    fn cst_decode(self) -> (Option<String>, Vec<crate::api::api::EgSearchResult>) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(String, String)> for wire_cst_record_string_string {
    fn cst_decode(self) -> (String, String) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<crate::api::api::SpotlightEntrySummary> for wire_cst_spotlight_entry_summary {
    fn cst_decode(self) -> crate::api::api::SpotlightEntrySummary {
        crate::api::api::SpotlightEntrySummary {
            id: self.id.cst_decode(),
            variants: self.variants.cst_decode(),
            variants_simp: self.variants_simp.cst_decode(),
            jyutpings: self.jyutpings.cst_decode(),
            yales: self.yales.cst_decode(),
            def: self.def.cst_decode(),
            def_simp: self.def_simp.cst_decode(),
            def_en: self.def_en.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::api::VariantSearchResult> for wire_cst_variant_search_result {
    fn cst_decode(self) -> crate::api::api::VariantSearchResult {
        crate::api::api::VariantSearchResult {
            id: self.id.cst_decode(),
            matched_variant: self.matched_variant.cst_decode(),
            yues: self.yues.cst_decode(),
            engs: self.engs.cst_decode(),
        }
    }
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_combined_search_results {
    fn new_with_null_ptr() -> Self {
        Self {
            variant_results: core::ptr::null_mut(),
            pr_results: core::ptr::null_mut(),
            english_results: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_combined_search_results {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_eg_search_result {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            def_index: Default::default(),
            eg_index: Default::default(),
            eg: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_eg_search_result {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_english_search_result {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            def_index: Default::default(),
            variant: core::ptr::null_mut(),
            pr: core::ptr::null_mut(),
            matched_eng: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_english_search_result {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_entry_summary {
    fn new_with_null_ptr() -> Self {
        Self {
            variant: core::ptr::null_mut(),
            defs: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_entry_summary {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_matched_segment {
    fn new_with_null_ptr() -> Self {
        Self {
            segment: core::ptr::null_mut(),
            matched: Default::default(),
        }
    }
}
impl Default for wire_cst_matched_segment {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_matched_variant {
    fn new_with_null_ptr() -> Self {
        Self {
            prefix: core::ptr::null_mut(),
            query: core::ptr::null_mut(),
            suffix: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_matched_variant {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_pr_search_result {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            variant: core::ptr::null_mut(),
            matched_pr: core::ptr::null_mut(),
            yues: core::ptr::null_mut(),
            engs: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_pr_search_result {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_opt_string_list_eg_search_result {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_record_opt_string_list_eg_search_result {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_string {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_record_string_string {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_spotlight_entry_summary {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            variants: core::ptr::null_mut(),
            variants_simp: core::ptr::null_mut(),
            jyutpings: core::ptr::null_mut(),
            yales: core::ptr::null_mut(),
            def: core::ptr::null_mut(),
            def_simp: core::ptr::null_mut(),
            def_en: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_spotlight_entry_summary {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_variant_search_result {
    fn new_with_null_ptr() -> Self {
        Self {
            id: Default::default(),
            matched_variant: Default::default(),
            yues: core::ptr::null_mut(),
            engs: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_variant_search_result {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[no_mangle]
pub extern "C" fn wire_combined_search(
    port_: i64,
    capacity: u32,
    query: *mut wire_cst_list_prim_u_8,
    script: i32,
    romanization: i32,
) {
    wire_combined_search_impl(port_, capacity, query, script, romanization)
}

#[no_mangle]
pub extern "C" fn wire_create_log_stream(port_: i64) {
    wire_create_log_stream_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_eg_search(
    port_: i64,
    capacity: u32,
    max_first_index_in_eg: u32,
    query: *mut wire_cst_list_prim_u_8,
    script: i32,
) {
    wire_eg_search_impl(port_, capacity, max_first_index_in_eg, query, script)
}

#[no_mangle]
pub extern "C" fn wire_english_search(
    port_: i64,
    capacity: u32,
    query: *mut wire_cst_list_prim_u_8,
    script: i32,
) {
    wire_english_search_impl(port_, capacity, query, script)
}

#[no_mangle]
pub extern "C" fn wire_generate_pr_indices(port_: i64, romanization: i32) {
    wire_generate_pr_indices_impl(port_, romanization)
}

#[no_mangle]
pub extern "C" fn wire_get_entry_group_json(port_: i64, id: u32) {
    wire_get_entry_group_json_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_get_entry_id(port_: i64, query: *mut wire_cst_list_prim_u_8, script: i32) {
    wire_get_entry_id_impl(port_, query, script)
}

#[no_mangle]
pub extern "C" fn wire_get_entry_json(port_: i64, id: u32) {
    wire_get_entry_json_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn wire_get_entry_summaries(
    port_: i64,
    entry_ids: *mut wire_cst_list_prim_u_32,
    script: i32,
) {
    wire_get_entry_summaries_impl(port_, entry_ids, script)
}

#[no_mangle]
pub extern "C" fn wire_get_jyutping(port_: i64, query: *mut wire_cst_list_prim_u_8) {
    wire_get_jyutping_impl(port_, query)
}

#[no_mangle]
pub extern "C" fn wire_get_splotlight_summaries(port_: i64) {
    wire_get_splotlight_summaries_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_init_api(
    port_: i64,
    dict_data: *mut wire_cst_list_prim_u_8,
    english_index_data: *mut wire_cst_list_prim_u_8,
) {
    wire_init_api_impl(port_, dict_data, english_index_data)
}

#[no_mangle]
pub extern "C" fn wire_pr_search(
    port_: i64,
    capacity: u32,
    query: *mut wire_cst_list_prim_u_8,
    script: i32,
    romanization: i32,
) {
    wire_pr_search_impl(port_, capacity, query, script, romanization)
}

#[no_mangle]
pub extern "C" fn wire_variant_search(
    port_: i64,
    capacity: u32,
    query: *mut wire_cst_list_prim_u_8,
    script: i32,
) {
    wire_variant_search_impl(port_, capacity, query, script)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_32(value: u32) -> *mut u32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_list_String(len: i32) -> *mut wire_cst_list_String {
    let wrap = wire_cst_list_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_eg_search_result(len: i32) -> *mut wire_cst_list_eg_search_result {
    let wrap = wire_cst_list_eg_search_result {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_eg_search_result>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_english_search_result(
    len: i32,
) -> *mut wire_cst_list_english_search_result {
    let wrap = wire_cst_list_english_search_result {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_english_search_result>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_entry_summary(len: i32) -> *mut wire_cst_list_entry_summary {
    let wrap = wire_cst_list_entry_summary {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_entry_summary>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_matched_segment(len: i32) -> *mut wire_cst_list_matched_segment {
    let wrap = wire_cst_list_matched_segment {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_matched_segment>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_pr_search_result(len: i32) -> *mut wire_cst_list_pr_search_result {
    let wrap = wire_cst_list_pr_search_result {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_pr_search_result>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_32(len: i32) -> *mut wire_cst_list_prim_u_32 {
    let ans = wire_cst_list_prim_u_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_8(len: i32) -> *mut wire_cst_list_prim_u_8 {
    let ans = wire_cst_list_prim_u_8 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_record_string_string(
    len: i32,
) -> *mut wire_cst_list_record_string_string {
    let wrap = wire_cst_list_record_string_string {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_string>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_spotlight_entry_summary(
    len: i32,
) -> *mut wire_cst_list_spotlight_entry_summary {
    let wrap = wire_cst_list_spotlight_entry_summary {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_spotlight_entry_summary>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_variant_search_result(
    len: i32,
) -> *mut wire_cst_list_variant_search_result {
    let wrap = wire_cst_list_variant_search_result {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_variant_search_result>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_combined_search_results {
    variant_results: *mut wire_cst_list_variant_search_result,
    pr_results: *mut wire_cst_list_pr_search_result,
    english_results: *mut wire_cst_list_english_search_result,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_eg_search_result {
    id: u32,
    def_index: u32,
    eg_index: u32,
    eg: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_english_search_result {
    id: u32,
    def_index: u32,
    variant: *mut wire_cst_list_prim_u_8,
    pr: *mut wire_cst_list_prim_u_8,
    matched_eng: *mut wire_cst_list_matched_segment,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_entry_summary {
    variant: *mut wire_cst_list_prim_u_8,
    defs: *mut wire_cst_list_record_string_string,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_String {
    ptr: *mut *mut wire_cst_list_prim_u_8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_eg_search_result {
    ptr: *mut wire_cst_eg_search_result,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_english_search_result {
    ptr: *mut wire_cst_english_search_result,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_entry_summary {
    ptr: *mut wire_cst_entry_summary,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_matched_segment {
    ptr: *mut wire_cst_matched_segment,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_pr_search_result {
    ptr: *mut wire_cst_pr_search_result,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_32 {
    ptr: *mut u32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8 {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_string {
    ptr: *mut wire_cst_record_string_string,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_spotlight_entry_summary {
    ptr: *mut wire_cst_spotlight_entry_summary,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_variant_search_result {
    ptr: *mut wire_cst_variant_search_result,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_matched_segment {
    segment: *mut wire_cst_list_prim_u_8,
    matched: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_matched_variant {
    prefix: *mut wire_cst_list_prim_u_8,
    query: *mut wire_cst_list_prim_u_8,
    suffix: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_pr_search_result {
    id: u32,
    variant: *mut wire_cst_list_prim_u_8,
    matched_pr: *mut wire_cst_list_matched_segment,
    yues: *mut wire_cst_list_String,
    engs: *mut wire_cst_list_String,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_opt_string_list_eg_search_result {
    field0: *mut wire_cst_list_prim_u_8,
    field1: *mut wire_cst_list_eg_search_result,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_string {
    field0: *mut wire_cst_list_prim_u_8,
    field1: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_spotlight_entry_summary {
    id: u32,
    variants: *mut wire_cst_list_String,
    variants_simp: *mut wire_cst_list_String,
    jyutpings: *mut wire_cst_list_String,
    yales: *mut wire_cst_list_String,
    def: *mut wire_cst_list_prim_u_8,
    def_simp: *mut wire_cst_list_prim_u_8,
    def_en: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_variant_search_result {
    id: u32,
    matched_variant: wire_cst_matched_variant,
    yues: *mut wire_cst_list_String,
    engs: *mut wire_cst_list_String,
}
